@{
    ViewData["Title"] = "Danh sách check-in xe";
    Layout = "~/vn.fpt.edu.views/Shared/_DashboardLayout.cshtml";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h4 class="mb-0">Danh sách check-in xe</h4>
                    <a href="/VehicleCheckins/Create" class="btn btn-primary">
                        <i class="fas fa-plus"></i> Check-in xe mới
                    </a>
                </div>
                <div class="card-body">
                    <!-- Search and Filter -->
                    <div class="row mb-3">
                        <div class="col-md-3">
                            <input type="text" class="form-control" id="searchInput" placeholder="Tìm kiếm theo biển số...">
                        </div>
                        <div class="col-md-2">
                            <select class="form-select" id="statusFilter">
                                <option value="">Tất cả trạng thái</option>
                                <option value="PENDING">Chờ xử lý</option>
                                <option value="IN_PROGRESS">Đang xử lý</option>
                                <option value="COMPLETED">Hoàn thành</option>
                                <option value="CANCELLED">Hủy</option>
                            </select>
                        </div>
                        <div class="col-md-2">
                            <select class="form-select" id="branchFilter">
                                <option value="">Tất cả chi nhánh</option>
                                <!-- Will be loaded dynamically -->
                            </select>
                        </div>
                        <div class="col-md-2">
                            <input type="date" class="form-control" id="dateFilter" placeholder="Lọc theo ngày">
                        </div>
                        <div class="col-md-2">
                            <button class="btn btn-outline-secondary w-100" onclick="resetFilters()">
                                <i class="fas fa-refresh"></i> Reset
                            </button>
                        </div>
                        <div class="col-md-1">
                            <button class="btn btn-success w-100" onclick="exportToExcel()">
                                <i class="fas fa-file-excel"></i> Export
                            </button>
                        </div>
                    </div>

                    <!-- Table -->
                    <div class="table-responsive">
                        <table class="table table-striped table-hover">
                            <thead class="table-dark">
                                <tr>
                                    <th>ID</th>
                                    <th>Biển số xe</th>
                                    <th>Chủ xe</th>
                                    <th>Loại xe</th>
                                    <th>Trạng thái</th>
                                    <th>Ngày check-in</th>
                                    <th>Thao tác</th>
                                </tr>
                            </thead>
                            <tbody id="checkinsTableBody">
                                <!-- Data will be loaded here -->
                            </tbody>
                        </table>
                    </div>

                    <!-- Pagination -->
                    <nav aria-label="Page navigation">
                        <ul class="pagination justify-content-center" id="pagination">
                            <!-- Pagination will be generated here -->
                        </ul>
                    </nav>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let currentPage = 1;
        const pageSize = 10;

        document.addEventListener('DOMContentLoaded', function() {
            loadCheckins();
            loadBranches();
            
            // Search functionality
            document.getElementById('searchInput').addEventListener('input', debounce(loadCheckins, 500));
            document.getElementById('statusFilter').addEventListener('change', loadCheckins);
            document.getElementById('branchFilter').addEventListener('change', loadCheckins);
            document.getElementById('dateFilter').addEventListener('change', loadCheckins);
        });

        function loadCheckins() {
            const search = document.getElementById('searchInput').value;
            const status = document.getElementById('statusFilter').value;
            const branch = document.getElementById('branchFilter').value;
            const date = document.getElementById('dateFilter').value;

            console.log('Calling API: VehicleCheckin?page=' + currentPage + '&pageSize=' + pageSize);
            
            fetch(`/VehicleCheckins/ListData?page=${currentPage}&pageSize=${pageSize}`)
                .then(response => {
                    console.log('Response status:', response.status);
                    console.log('Response headers:', response.headers);
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    console.log('API Response:', data); // Debug log
                    console.log('Data length:', data.data ? data.data.length : 'undefined');
                    if (data.data && data.data.length > 0) {
                        console.log('First item status:', data.data[0].statusCode);
                        console.log('First item maintenanceRequestStatus:', data.data[0].maintenanceRequestStatus);
                    }
                    if (data.success) {
                        renderCheckinsTable(data.data);
                        renderPagination(data.totalPages, data.currentPage);
                    } else {
                        showAlert('Lỗi khi tải dữ liệu: ' + data.message, 'danger');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showAlert('Có lỗi xảy ra khi tải dữ liệu: ' + error.message, 'danger');
                });
        }

        function loadBranches() {
            // Tạm thời comment để tránh lỗi API không tồn tại
            // fetch('/api/Branch')
            //     .then(response => response.json())
            //     .then(data => {
            //         if (data.success) {
            //             const select = document.getElementById('branchFilter');
            //             data.data.forEach(branch => {
            //                 const option = document.createElement('option');
            //                 option.value = branch.id;
            //                 option.textContent = branch.name;
            //                 select.appendChild(option);
            //             });
            //         }
            //     })
            //     .catch(error => {
            //         console.error('Error loading branches:', error);
            //     });
        }

        function renderCheckinsTable(checkins) {
            console.log('renderCheckinsTable called with:', checkins);
            const tbody = document.getElementById('checkinsTableBody');
            tbody.innerHTML = '';

            if (!checkins || checkins.length === 0) {
                console.log('No data to render');
                tbody.innerHTML = '<tr><td colspan="7" class="text-center">Không có dữ liệu</td></tr>';
                return;
            }

            console.log('Rendering', checkins.length, 'checkins');
            checkins.forEach((checkin, index) => {
                console.log('Rendering checkin', index, ':', checkin);
                console.log('StatusCode:', checkin.statusCode);
                console.log('MaintenanceRequestStatus:', checkin.maintenanceRequestStatus);
                const row = document.createElement('tr');
                try {
                    row.innerHTML = `
                        <td>${checkin.id}</td>
                        <td><strong>${checkin.licensePlate || '-'}</strong></td>
                        <td>${checkin.customerName || '-'}</td>
                        <td><span class="badge bg-info">${checkin.carName || '-'}</span></td>
                        <td><span class="badge ${getStatusBadgeClass(checkin.statusCode)}">${getStatusText(checkin.statusCode)}</span></td>
                        <td>${checkin.createdAt ? new Date(checkin.createdAt).toLocaleString('vi-VN') : '-'}</td>
                        <td>
                            <div class="btn-group" role="group">
                                <a href="/VehicleCheckins/Details/${checkin.id}" class="btn btn-sm btn-outline-info" title="Xem chi tiết">
                                    <i class="fas fa-eye"></i>
                                </a>
                                <a href="/VehicleCheckins/Edit/${checkin.id}" class="btn btn-sm btn-outline-warning" title="Sửa">
                                    <i class="fas fa-edit"></i>
                                </a>
                                <button class="btn btn-sm btn-success" onclick="createMaintenanceTicket(${checkin.id})" title="Tạo phiếu bảo dưỡng">
                                    <i class="fas fa-wrench"></i>
                                </button>
                                <button class="btn btn-sm btn-outline-danger" onclick="deleteCheckin(${checkin.id})" title="Xóa">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </td>
                    `;
                    tbody.appendChild(row);
                    console.log('Successfully added row for checkin', checkin.id);
                } catch (error) {
                    console.error('Error creating row for checkin', checkin.id, ':', error);
                }
            });
        }

        function getStatusBadgeClass(status) {
            switch(status) {
                case 'PENDING': return 'bg-warning';
                case 'IN_PROGRESS': return 'bg-primary';
                case 'DONE': return 'bg-success';
                case 'CANCELLED': return 'bg-danger';
                case 'CONFIRMED': return 'bg-info';
                case 'REJECTED': return 'bg-danger';
                default: return 'bg-secondary';
            }
        }

        function getStatusText(status) {
            switch(status) {
                case 'PENDING': return 'Chờ xử lý';
                case 'IN_PROGRESS': return 'Đang thực hiện';
                case 'DONE': return 'Hoàn thành';
                case 'CANCELLED': return 'Đã hủy';
                case 'CONFIRMED': return 'Đã xác nhận';
                case 'REJECTED': return 'Từ chối';
                default: return status;
            }
        }

        function renderPagination(totalPages, currentPage) {
            const pagination = document.getElementById('pagination');
            pagination.innerHTML = '';

            if (totalPages <= 1) return;

            // Previous button
            const prevLi = document.createElement('li');
            prevLi.className = `page-item ${currentPage === 1 ? 'disabled' : ''}`;
            prevLi.innerHTML = `<a class="page-link" href="#" onclick="changePage(${currentPage - 1})">Trước</a>`;
            pagination.appendChild(prevLi);

            // Page numbers
            for (let i = 1; i <= totalPages; i++) {
                const li = document.createElement('li');
                li.className = `page-item ${i === currentPage ? 'active' : ''}`;
                li.innerHTML = `<a class="page-link" href="#" onclick="changePage(${i})">${i}</a>`;
                pagination.appendChild(li);
            }

            // Next button
            const nextLi = document.createElement('li');
            nextLi.className = `page-item ${currentPage === totalPages ? 'disabled' : ''}`;
            nextLi.innerHTML = `<a class="page-link" href="#" onclick="changePage(${currentPage + 1})">Sau</a>`;
            pagination.appendChild(nextLi);
        }

        function changePage(page) {
            if (page < 1) return;
            currentPage = page;
            loadCheckins();
        }

        function createMaintenanceTicket(checkinId) {
            if (confirm('Bạn có muốn tạo phiếu bảo dưỡng từ check-in này?')) {
                // Create maintenance ticket via API
                fetch('/MaintenanceTickets/CreateFromCheckin', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        vehicleCheckinId: checkinId,
                        consulterId: 1, // Default consulter ID - should be from session
                        technicianId: null,
                        branchId: 1, // Default branch ID - should be from session
                        scheduleServiceId: null,
                        statusCode: 'PENDING'
                    })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showAlert('Tạo phiếu bảo dưỡng thành công!', 'success');
                        // Optionally redirect to maintenance tickets list
                        setTimeout(() => {
                            window.location.href = '/MaintenanceTickets';
                        }, 1500);
                    } else {
                        showAlert('Lỗi tạo phiếu bảo dưỡng: ' + data.message, 'danger');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showAlert('Có lỗi xảy ra khi tạo phiếu bảo dưỡng', 'danger');
                });
            }
        }

        function deleteCheckin(id) {
            if (confirm('Bạn có chắc chắn muốn xóa check-in này?')) {
                fetch(`/api/VehicleCheckin/${id}`, {
                    method: 'DELETE'
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showAlert('Xóa check-in thành công', 'success');
                        loadCheckins();
                    } else {
                        showAlert('Lỗi khi xóa: ' + data.message, 'danger');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showAlert('Có lỗi xảy ra khi xóa', 'danger');
                });
            }
        }

        function exportToExcel() {
            const search = document.getElementById('searchInput').value;
            const status = document.getElementById('statusFilter').value;
            const branch = document.getElementById('branchFilter').value;
            const date = document.getElementById('dateFilter').value;
            
            const params = new URLSearchParams({
                search, status, branch, date,
                export: 'excel'
            });
            
            window.open(`/api/VehicleCheckin/export?${params.toString()}`, '_blank');
        }

        function resetFilters() {
            document.getElementById('searchInput').value = '';
            document.getElementById('statusFilter').value = '';
            document.getElementById('branchFilter').value = '';
            document.getElementById('dateFilter').value = '';
            currentPage = 1;
            loadCheckins();
        }

        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }

        function showAlert(message, type) {
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type} alert-dismissible fade show`;
            alertDiv.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            document.querySelector('.card-body').insertBefore(alertDiv, document.querySelector('.table-responsive'));
            
            setTimeout(() => {
                alertDiv.remove();
            }, 5000);
        }
    </script>
}
