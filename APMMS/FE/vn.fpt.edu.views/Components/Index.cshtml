@model FE.vn.fpt.edu.viewmodels.ComponentListViewModel
@{
    ViewData["Title"] = "Danh sách linh kiện";
    Layout = "~/vn.fpt.edu.views/Shared/_DashboardLayout.cshtml";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h4 class="mb-0">Danh sách linh kiện</h4>
                    <a href="/Components/Create" class="btn btn-primary">
                        <i class="fas fa-plus"></i> Thêm linh kiện mới
                    </a>
                </div>
                <div class="card-body">
                    <!-- Search and Filter -->
                    <form method="get" action="/Components">
                        <div class="row mb-3">
                            <div class="col-md-4">
                                <input type="text" class="form-control" name="search" value="@Model.SearchTerm" placeholder="Tìm kiếm linh kiện...">
                            </div>
                            <div class="col-md-2">
                                <select class="form-select" name="typeComponentId">
                                    <option value="">Tất cả loại</option>
                                    <!-- Type components will be loaded via JavaScript -->
                                </select>
                            </div>
                            <div class="col-md-2">
                                <select class="form-select" name="status">
                                    <option value="">Tất cả trạng thái</option>
                                    <option value="ACTIVE" selected="@(Model.StatusFilter == "ACTIVE")">Đang hoạt động</option>
                                    <option value="DISABLED" selected="@(Model.StatusFilter == "DISABLED")">Ngưng cung cấp</option>
                                </select>
                            </div>
                            <div class="col-md-2">
                                <button type="submit" class="btn btn-outline-secondary">
                                    <i class="fas fa-filter"></i> Lọc
                                </button>
                            </div>
                        </div>
                        <input type="hidden" name="page" value="1">
                        <input type="hidden" name="pageSize" value="@Model.PageSize">
                    </form>

                    <!-- Table -->
                    <div class="table-responsive">
                        <table class="table table-striped table-hover">
                            <thead class="table-dark">
                                <tr>
                                    <th><input type="checkbox" id="selectAll"></th>
                                    <th>Mã linh kiện</th>
                                    <th>Tên linh kiện</th>
                                    <th>Loại</th>
                                    <th>Nhà sản xuất</th>
                                    <th>Số lượng</th>
                                    <th>Giá</th>
                                    <th>Trạng thái</th>
                                    <th>Thao tác</th>
                                </tr>
                            </thead>
                            <tbody id="componentsTable">
                                @if (Model.Components.Any())
                                {
                                    @foreach (var component in Model.Components)
                                    {
                                        <tr>
                                            <td><input type="checkbox" class="component-checkbox" value="@component.Id"></td>
                                            <td>@(component.Code ?? "-")</td>
                                            <td>@component.Name</td>
                                            <td>@(component.TypeComponentName ?? "-")</td>
                                            <td>@(component.BranchName ?? "-")</td>
                                            <td>@(component.QuantityStock ?? 0)</td>
                                            <td>@(component.UnitPrice?.ToString("N0") + " ₫" ?? "-")</td>
                                            <td>
                                                @if (component.Status == "ACTIVE")
                                                {
                                                    <span class="badge bg-success">Đang hoạt động</span>
                                                }
                                                else if (component.Status == "DISABLED")
                                                {
                                                    <span class="badge bg-warning">Ngưng cung cấp</span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-secondary">@component.Status</span>
                                                }
                                            </td>
                                            <td>
                                                <a href="/Components/Details/@component.Id" class="btn btn-sm btn-outline-info">
                                                    <i class="fas fa-eye"></i>
                                                </a>
                                                <a href="/Components/Edit/@component.Id" class="btn btn-sm btn-outline-primary">
                                                    <i class="fas fa-edit"></i>
                                                </a>
                                                @if (component.Status == "ACTIVE")
                                                {
                                                    <form method="post" action="/Components/UpdateStatus/@component.Id" style="display: inline;" onsubmit="return confirm('Bạn có chắc chắn muốn ngưng cung cấp linh kiện này?')">
                                                        <input type="hidden" name="status" value="DISABLED">
                                                        <button type="submit" class="btn btn-sm btn-outline-warning" title="Ngưng cung cấp">
                                                            <i class="fas fa-pause"></i>
                                                        </button>
                                                    </form>
                                                }
                                                else
                                                {
                                                    <form method="post" action="/Components/UpdateStatus/@component.Id" style="display: inline;" onsubmit="return confirm('Bạn có chắc chắn muốn kích hoạt lại linh kiện này?')">
                                                        <input type="hidden" name="status" value="ACTIVE">
                                                        <button type="submit" class="btn btn-sm btn-outline-success" title="Kích hoạt">
                                                            <i class="fas fa-play"></i>
                                                        </button>
                                                    </form>
                                                }
                                            </td>
                                        </tr>
                                    }
                                }
                                else
                                {
                                    <tr>
                                        <td colspan="9" class="text-center">Không có dữ liệu</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>

                    <!-- Pagination -->
                    @if (Model.TotalPages > 1)
                    {
                        <nav aria-label="Page navigation">
                            <ul class="pagination justify-content-center">
                                @if (Model.CurrentPage > 1)
                                {
                                    <li class="page-item">
                                        <a class="page-link" href="?page=@(Model.CurrentPage - 1)&pageSize=@Model.PageSize&search=@Model.SearchTerm&typeComponentId=@Model.TypeComponentId&status=@Model.StatusFilter">Trước</a>
                                    </li>
                                }
                                else
                                {
                                    <li class="page-item disabled">
                                        <a class="page-link" href="#" tabindex="-1">Trước</a>
                                    </li>
                                }

                                @for (int i = Math.Max(1, Model.CurrentPage - 2); i <= Math.Min(Model.TotalPages, Model.CurrentPage + 2); i++)
                                {
                                    <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                                        <a class="page-link" href="?page=@i&pageSize=@Model.PageSize&search=@Model.SearchTerm&typeComponentId=@Model.TypeComponentId&status=@Model.StatusFilter">@i</a>
                                    </li>
                                }

                                @if (Model.CurrentPage < Model.TotalPages)
                                {
                                    <li class="page-item">
                                        <a class="page-link" href="?page=@(Model.CurrentPage + 1)&pageSize=@Model.PageSize&search=@Model.SearchTerm&typeComponentId=@Model.TypeComponentId&status=@Model.StatusFilter">Sau</a>
                                    </li>
                                }
                                else
                                {
                                    <li class="page-item disabled">
                                        <a class="page-link" href="#">Sau</a>
                                    </li>
                                }
                            </ul>
                        </nav>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let currentPage = 1;
        let pageSize = 10;
        let totalPages = 1;

        // Load data when page loads
        document.addEventListener('DOMContentLoaded', function() {
            loadComponents();
            loadTypeComponents();
            
            // Event listeners
            document.getElementById('filterBtn').addEventListener('click', applyFilters);
            document.getElementById('searchInput').addEventListener('keyup', function(e) {
                if (e.key === 'Enter') applyFilters();
            });
        });

        // Load components from API
        async function loadComponents() {
            try {
                const searchTerm = document.getElementById('searchInput').value;
                const typeFilter = document.getElementById('typeFilter').value;
                const statusFilter = document.getElementById('statusFilter').value;
                
                let url = `https://localhost:7173/api/Component?page=${currentPage}&pageSize=${pageSize}`;
                
                if (typeFilter) {
                    url += `&typeComponentId=${typeFilter}`;
                }
                
                const response = await fetch(url);
                const result = await response.json();
                
                if (result.success) {
                    displayComponents(result.data);
                    updatePagination(result.pagination);
                } else {
                    showAlert('Lỗi khi tải dữ liệu: ' + result.message, 'danger');
                }
            } catch (error) {
                console.error('Error loading components:', error);
                showAlert('Lỗi khi tải dữ liệu', 'danger');
            }
        }

        // Load type components for filter dropdown
        async function loadTypeComponents() {
            try {
                const response = await fetch('https://localhost:7173/api/TypeComponent');
                const result = await response.json();
                
                if (result.success) {
                    const select = document.getElementById('typeFilter');
                    select.innerHTML = '<option value="">Tất cả loại</option>';
                    
                    result.data.forEach(typeComponent => {
                        const option = document.createElement('option');
                        option.value = typeComponent.id;
                        option.textContent = typeComponent.name;
                        select.appendChild(option);
                    });
                }
            } catch (error) {
                console.error('Error loading type components:', error);
            }
        }

        // Display components in table
        function displayComponents(components) {
            const tbody = document.getElementById('componentsTable');
            tbody.innerHTML = '';
            
            components.forEach((component, index) => {
                const row = document.createElement('tr');
                const statusBadge = getStatusBadge(component.quantityStock);
                const sellPrice = component.unitPrice ? (component.unitPrice * 1.1) : 0;
                
                row.innerHTML = `
                    <td><input type="checkbox" class="component-checkbox" value="${component.id}"></td>
                    <td>${component.code || '-'}</td>
                    <td>${component.name}</td>
                    <td>${component.typeComponentName || '-'}</td>
                    <td>${component.branchName || '-'}</td>
                    <td>${component.quantityStock || 0}</td>
                    <td>${component.unitPrice ? component.unitPrice.toLocaleString('vi-VN') + ' ₫' : '-'}</td>
                    <td>${statusBadge}</td>
                    <td>
                        <a href="/Components/Details/${component.id}" class="btn btn-sm btn-outline-info">
                            <i class="fas fa-eye"></i>
                        </a>
                        <a href="/Components/Edit/${component.id}" class="btn btn-sm btn-outline-primary">
                            <i class="fas fa-edit"></i>
                        </a>
                        <button class="btn btn-sm btn-outline-danger" onclick="deleteComponent(${component.id})">
                            <i class="fas fa-trash"></i>
                        </button>
                    </td>
                `;
                tbody.appendChild(row);
            });
        }

        // Get status badge based on quantity
        function getStatusBadge(quantity) {
            if (!quantity || quantity <= 0) {
                return '<span class="badge bg-warning">Hết hàng</span>';
            } else if (quantity < 10) {
                return '<span class="badge bg-danger">Sắp hết</span>';
            } else {
                return '<span class="badge bg-success">Có sẵn</span>';
            }
        }

        // Update pagination
        function updatePagination(pagination) {
            const paginationContainer = document.querySelector('.pagination');
            paginationContainer.innerHTML = '';
            
            // Previous button
            const prevButton = document.createElement('li');
            prevButton.className = `page-item ${pagination.page === 1 ? 'disabled' : ''}`;
            prevButton.innerHTML = `<a class="page-link" href="#" onclick="changePage(${pagination.page - 1})">Trước</a>`;
            paginationContainer.appendChild(prevButton);
            
            // Page numbers
            const startPage = Math.max(1, pagination.page - 2);
            const endPage = Math.min(pagination.totalPages, pagination.page + 2);
            
            for (let i = startPage; i <= endPage; i++) {
                const pageButton = document.createElement('li');
                pageButton.className = `page-item ${i === pagination.page ? 'active' : ''}`;
                pageButton.innerHTML = `<a class="page-link" href="#" onclick="changePage(${i})">${i}</a>`;
                paginationContainer.appendChild(pageButton);
            }
            
            // Next button
            const nextButton = document.createElement('li');
            nextButton.className = `page-item ${pagination.page === pagination.totalPages ? 'disabled' : ''}`;
            nextButton.innerHTML = `<a class="page-link" href="#" onclick="changePage(${pagination.page + 1})">Sau</a>`;
            paginationContainer.appendChild(nextButton);
        }

        // Change page
        function changePage(page) {
            currentPage = page;
            loadComponents();
        }

        // Apply filters
        function applyFilters() {
            currentPage = 1;
            loadComponents();
        }

        // Delete component
        async function deleteComponent(id) {
            if (confirm('Bạn có chắc chắn muốn xóa linh kiện này?')) {
                try {
                    const response = await fetch(`https://localhost:7173/api/Component/${id}`, {
                        method: 'DELETE'
                    });
                    const result = await response.json();
                    
                    if (result.success) {
                        showAlert('Xóa linh kiện thành công!', 'success');
                        loadComponents();
                    } else {
                        showAlert('Lỗi khi xóa: ' + result.message, 'danger');
                    }
                } catch (error) {
                    console.error('Error deleting component:', error);
                    showAlert('Lỗi khi xóa linh kiện', 'danger');
                }
            }
        }

        // Show alert
        function showAlert(message, type) {
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type} alert-dismissible fade show`;
            alertDiv.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            
            const container = document.querySelector('.container-fluid');
            container.insertBefore(alertDiv, container.firstChild);
            
            // Auto remove after 5 seconds
            setTimeout(() => {
                alertDiv.remove();
            }, 5000);
        }
    </script>
}
