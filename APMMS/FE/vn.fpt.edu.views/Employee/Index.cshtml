@{
    ViewData["Title"] = "Danh sách nhân viên";
    Layout = "~/vn.fpt.edu.views/Shared/_DashboardLayout.cshtml";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h4 class="mb-0">Danh sách nhân viên</h4>
                </div>
                <div class="card-body">
                    <!-- Search and Filter -->
                    <div class="row mb-3 align-items-center">
                        <div class="col-md-6 d-flex gap-2">
                            <a href="/Employees/Create" class="btn btn-primary">
                                <i class="fas fa-plus"></i> Thêm mới
                            </a>
                            <button class="btn btn-secondary" onclick="editSelectedStatus()">
                                <i class="fas fa-edit"></i> Sửa trạng thái
                            </button>
                            <select class="form-select" id="statusFilter" style="width: auto;">
                                <option value="">Chọn trạng thái</option>
                                <option value="ACTIVE">Hoạt động</option>
                                <option value="INACTIVE">Không hoạt động</option>
                            </select>
                            <select class="form-select" id="roleFilter" style="width: auto;">
                                <option value="">Chọn chức vụ</option>
                                <option value="3">Accountant</option>
                                <option value="4">Technician</option>
                                <option value="5">Warehouse Keeper</option>
                                <option value="6">Consulter</option>
                            </select>
                        </div>
                        <div class="col-md-6 d-flex justify-content-end">
                            <input type="text" class="form-control" id="searchInput" placeholder="Tìm kiếm nhân viên" style="max-width: 300px;">
                        </div>
                    </div>

                    <!-- Table -->
                    <div class="table-responsive">
                        <table class="table table-striped table-hover">
                            <thead class="table-dark">
                                <tr>
                                    <th style="width: 40px;">
                                        <input type="checkbox" id="selectAll" onchange="toggleSelectAll()">
                                    </th>
                                    <th style="width: 60px;">STT</th>
                                    <th>Tên</th>
                                    <th>Mã</th>
                                    <th>Email</th>
                                    <th>Số điện thoại</th>
                                    <th>Chức vụ</th>
                                    <th>Tình trạng</th>
                                </tr>
                            </thead>
                            <tbody id="employeesTableBody">
                                <!-- Data will be loaded here -->
                            </tbody>
                        </table>
                    </div>

                    <!-- Pagination -->
                    <nav aria-label="Page navigation">
                        <ul class="pagination justify-content-center" id="pagination">
                            <!-- Pagination will be generated here -->
                        </ul>
                    </nav>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let currentPage = 1;
        const pageSize = 10;

        document.addEventListener('DOMContentLoaded', function() {
            loadEmployees();
            
            // Search functionality
            document.getElementById('searchInput').addEventListener('input', debounce(loadEmployees, 500));
            document.getElementById('statusFilter').addEventListener('change', loadEmployees);
            document.getElementById('roleFilter').addEventListener('change', loadEmployees);
        });

        function loadEmployees() {
            const search = document.getElementById('searchInput').value;
            const status = document.getElementById('statusFilter').value;
            const role = document.getElementById('roleFilter').value;

            fetch(`https://localhost:7173/api/Employee?page=${currentPage}&pageSize=${pageSize}&search=${encodeURIComponent(search || '')}&status=${encodeURIComponent(status || '')}&role=${encodeURIComponent(role || '')}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        renderEmployeesTable(data.data);
                        renderPagination(data.totalPages, data.currentPage);
                    } else {
                        showAlert('Lỗi khi tải dữ liệu: ' + (data.message || 'Unknown error'), 'danger');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showAlert('Có lỗi xảy ra khi tải dữ liệu: ' + error.message, 'danger');
                });
        }

        let selectedEmployees = new Set();

        function renderEmployeesTable(employees) {
            const tbody = document.getElementById('employeesTableBody');
            tbody.innerHTML = '';

            if (employees.length === 0) {
                tbody.innerHTML = '<tr><td colspan="8" class="text-center">Không có dữ liệu</td></tr>';
                return;
            }

            const startIndex = (currentPage - 1) * pageSize;
            employees.forEach((employee, index) => {
                const row = document.createElement('tr');
                const isActive = !employee.isDelete; // IsDelete = false means active
                const stt = startIndex + index + 1;
                const fullName = `${(employee.firstName || '')} ${(employee.lastName || '')}`.trim();
                
                row.innerHTML = `
                    <td>
                        <input type="checkbox" class="employee-checkbox" value="${employee.id}" onchange="toggleEmployeeSelection(${employee.id})">
                    </td>
                    <td>${stt}</td>
                    <td>
                        <a href="/Employees/Details/${employee.id}" style="text-decoration: none; color: inherit;">
                            ${fullName || '-'}
                        </a>
                    </td>
                    <td>${employee.code || '-'}</td>
                    <td>${employee.email || '-'}</td>
                    <td>${employee.phone || '-'}</td>
                    <td><span class="badge bg-info">${employee.roleName || '-'}</span></td>
                    <td>
                        <span class="badge ${isActive ? 'bg-success' : 'bg-secondary'}" style="padding: 5px 10px;">
                            ${isActive ? 'CÓ HIỆU LỰC' : 'KHÔNG HIỆU LỰC'}
                        </span>
                    </td>
                `;
                tbody.appendChild(row);
            });
        }

        function toggleSelectAll() {
            const selectAll = document.getElementById('selectAll');
            const checkboxes = document.querySelectorAll('.employee-checkbox');
            checkboxes.forEach(checkbox => {
                checkbox.checked = selectAll.checked;
                const employeeId = parseInt(checkbox.value);
                if (selectAll.checked) {
                    selectedEmployees.add(employeeId);
                } else {
                    selectedEmployees.delete(employeeId);
                }
            });
        }

        function toggleEmployeeSelection(employeeId) {
            const checkbox = document.querySelector(`.employee-checkbox[value="${employeeId}"]`);
            if (checkbox.checked) {
                selectedEmployees.add(employeeId);
            } else {
                selectedEmployees.delete(employeeId);
            }
            updateSelectAllCheckbox();
        }

        function updateSelectAllCheckbox() {
            const checkboxes = document.querySelectorAll('.employee-checkbox');
            const selectAll = document.getElementById('selectAll');
            if (checkboxes.length === 0) {
                selectAll.checked = false;
                return;
            }
            selectAll.checked = Array.from(checkboxes).every(cb => cb.checked);
        }

        function editSelectedStatus() {
            if (selectedEmployees.size === 0) {
                alert('Vui lòng chọn ít nhất một nhân viên');
                return;
            }
            // TODO: Implement status edit functionality
            alert('Chức năng sửa trạng thái đang được phát triển');
        }

        function renderPagination(totalPages, currentPage) {
            const pagination = document.getElementById('pagination');
            pagination.innerHTML = '';

            if (totalPages <= 1) return;

            // First page button
            const firstLi = document.createElement('li');
            firstLi.className = `page-item ${currentPage === 1 ? 'disabled' : ''}`;
            firstLi.innerHTML = `<a class="page-link" href="#" onclick="changePage(1); return false;">&laquo;&laquo;</a>`;
            pagination.appendChild(firstLi);

            // Previous button
            const prevLi = document.createElement('li');
            prevLi.className = `page-item ${currentPage === 1 ? 'disabled' : ''}`;
            prevLi.innerHTML = `<a class="page-link" href="#" onclick="changePage(${currentPage - 1}); return false;">&laquo;</a>`;
            pagination.appendChild(prevLi);

            // Page numbers (show max 5 pages around current)
            let startPage = Math.max(1, currentPage - 2);
            let endPage = Math.min(totalPages, currentPage + 2);
            
            if (startPage > 1) {
                const li = document.createElement('li');
                li.className = 'page-item';
                li.innerHTML = `<a class="page-link" href="#" onclick="changePage(1); return false;">1</a>`;
                pagination.appendChild(li);
                if (startPage > 2) {
                    const dots = document.createElement('li');
                    dots.className = 'page-item disabled';
                    dots.innerHTML = `<span class="page-link">...</span>`;
                    pagination.appendChild(dots);
                }
            }

            for (let i = startPage; i <= endPage; i++) {
                const li = document.createElement('li');
                li.className = `page-item ${i === currentPage ? 'active' : ''}`;
                li.innerHTML = `<a class="page-link" href="#" onclick="changePage(${i}); return false;">${i}</a>`;
                pagination.appendChild(li);
            }

            if (endPage < totalPages) {
                if (endPage < totalPages - 1) {
                    const dots = document.createElement('li');
                    dots.className = 'page-item disabled';
                    dots.innerHTML = `<span class="page-link">...</span>`;
                    pagination.appendChild(dots);
                }
                const li = document.createElement('li');
                li.className = 'page-item';
                li.innerHTML = `<a class="page-link" href="#" onclick="changePage(${totalPages}); return false;">${totalPages}</a>`;
                pagination.appendChild(li);
            }

            // Next button
            const nextLi = document.createElement('li');
            nextLi.className = `page-item ${currentPage === totalPages ? 'disabled' : ''}`;
            nextLi.innerHTML = `<a class="page-link" href="#" onclick="changePage(${currentPage + 1}); return false;">&raquo;</a>`;
            pagination.appendChild(nextLi);

            // Last page button
            const lastLi = document.createElement('li');
            lastLi.className = `page-item ${currentPage === totalPages ? 'disabled' : ''}`;
            lastLi.innerHTML = `<a class="page-link" href="#" onclick="changePage(${totalPages}); return false;">&raquo;&raquo;</a>`;
            pagination.appendChild(lastLi);
        }

        function changePage(page) {
            if (page < 1) return;
            currentPage = page;
            loadEmployees();
        }

        function deleteEmployee(id) {
            if (confirm('Bạn có chắc chắn muốn xóa nhân viên này?')) {
                fetch(`https://localhost:7173/api/Employee/${id}`, {
                    method: 'DELETE',
                    headers: {
                        'Authorization': `Bearer ${localStorage.getItem('token')}`
                    }
                })
                .then(response => {
                    if (response.status === 204) {
                        // NoContent response
                        showAlert('Xóa nhân viên thành công', 'success');
                        loadEmployees();
                    } else if (response.ok) {
                        return response.json().then(data => {
                            if (data.message || data.success) {
                                showAlert('Xóa nhân viên thành công', 'success');
                                loadEmployees();
                            } else {
                                showAlert('Lỗi khi xóa: ' + (data.message || 'Unknown error'), 'danger');
                            }
                        });
                    } else {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showAlert('Có lỗi xảy ra khi xóa: ' + error.message, 'danger');
                });
            }
        }

        function resetFilters() {
            document.getElementById('searchInput').value = '';
            document.getElementById('statusFilter').value = '';
            document.getElementById('roleFilter').value = '';
            currentPage = 1;
            selectedEmployees.clear();
            document.getElementById('selectAll').checked = false;
            loadEmployees();
        }

        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }

        function showAlert(message, type) {
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type} alert-dismissible fade show`;
            alertDiv.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            document.querySelector('.card-body').insertBefore(alertDiv, document.querySelector('.table-responsive'));
            
            setTimeout(() => {
                alertDiv.remove();
            }, 5000);
        }
    </script>
}
